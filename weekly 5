#client
import paho.mqtt.client as mqtt
# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe("$SYS/broker/publish/#")
# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic+" "+str(msg.payload.decode()))
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect("mqtt.eclipse.org", 1883, 60)
# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
# Other loop*() functions are available that give a threaded interface and a
# manual interface.
client.loop_forever()

#pub-multiple
import paho.mqtt.publish as publish
msgs = [{'topic':"paho/test/multiple", 'payload':"multiple 1"},
    ("paho/test/multiple", "multiple 2", 0, False)]
publish.multiple(msgs, hostname="localhost")

#pub
import paho.mqtt.publish as publish
publish.single("paho/test", "Hello", hostname="localhost")

#pubdata
import time
import datetime
import board
import adafruit_dht
import paho.mqtt.client as mqtt
dhtDevice = adafruit_dht.DHT22(board.D24)
mqttc = mqtt.Client()
mqttc.connect("mqtt.eclipse.org", 1883, 60)
mqttc.loop_start()
while True:
    try:  
        humidity = dhtDevice.humidity
        temp = dhtDevice.temperature
        if humidity is None or temp is None:
            time.sleep(2)
            continue
        now = datetime.datetime.now()
        dt = now.replace(microsecond=0)
        print(dt)
        print('Temperature: {0:0.1f} C'.format(temp))
        print('Humidity:    {0:0.1f} %'.format(humidity))
        mqttc.publish("rpi/dht", "%s" % dt)
        mqttc.publish("rpi/dht", "Temperature: %.1f C" % temp)
        mqttc.publish("rpi/dht", "Humidity:    %.1f %%" % humidity)
        time.sleep(10)
    except KeyboardInterrupt:
        exit()

#pubraspi
import time
import datetime
from system_info import get_temperature 
import psutil
import paho.mqtt.client as mqtt
mqttc = mqtt.Client()
mqttc.connect("mqtt.eclipse.org", 1883, 60)
mqttc.loop_start()
while True:
    try:  
        cpu = psutil.cpu_percent() 
        tmp = get_temperature()
        if cpu is None or tmp is None:
            time.sleep(2)
            continue
        now = datetime.datetime.now()
        dt = now.replace(microsecond=0)
        print(dt)
        print('Temperature: {0:0.1f} C'.format(tmp))
        print('CPU Usage:   {0:0.1f} %'.format(cpu))
        mqttc.publish("Raspberry Pi", "%s" % dt)
        mqttc.publish("Raspberry Pi", "Temperature: %.1f C" % tmp)
        mqttc.publish("Raspberry Pi", "CPU Usage:   %.1f %%" % cpu)
        time.sleep(10)
    except KeyboardInterrupt:
        exit()
        
#sub-multiple
import paho.mqtt.client as mqtt
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    client.subscribe("paho/test/multiple")
def on_message(client, userdata, msg):
    print(msg.topic+" "+str(msg.payload.decode()))
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect("localhost", 1883, 60)
client.loop_forever()

#sub
import paho.mqtt.client as mqtt
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    client.subscribe("paho/test")
def on_message(client, userdata, msg):
    print(msg.topic+" "+str(msg.payload.decode()))
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect("localhost", 1883, 60)
client.loop_forever()

#subdata
import paho.mqtt.client as mqtt
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    client.subscribe("rpi/dht")
def on_message(client, userdata, msg):
    print(msg.topic+" "+str(msg.payload.decode()))
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect("mqtt.eclipse.org", 1883, 60)
client.loop_forever()

#subraspi
import paho.mqtt.client as mqtt
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    client.subscribe("Raspberry Pi")
def on_message(client, userdata, msg):
    print(msg.topic+" "+str(msg.payload.decode()))
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect("mqtt.eclipse.org", 1883, 60)
client.loop_forever()

#system_info
import subprocess
import os
def get_ram():
# Returns a tuple (total ram, available ram) in megabytes. See www.linuxatemyram.com
    try:
        s = (subprocess.check_output(['free','-m'])).decode()
        lines = s.split('\n')
        return int(lines[1].split()[1]), int(lines[2].split()[3])
    except:
        return 0

def get_process_count():
# Returns the number of processes
    try:
        s = (subprocess.check_output(['ps','-e'])).decode()
        return len(s.split('\n'))
    except:
        return 0
def get_up_stats():
# Returns a tuple (uptime, 5 min load average)
    try:
        s = (subprocess.check_output(['uptime'])).decode()
        load_split = s.split('load average: ')
        load_five = float(load_split[1].split(',')[1])
        up = load_split[0]
        up_pos = up.rfind(',',0,len(up)-4)
        up = up[:up_pos].split('up ')[1]
        return ( up , load_five )
    except:
        return '' , 0
def get_connections():
# Returns the number of network connections
    try:
        s = (subprocess.check_output(['netstat','-tun'])).decode()
        return len([x for x in s.split() if x == 'ESTABLISHED'])
    except:
        return 0
def get_temperature():
# Returns the temperature in degrees C
    try:
        s = (subprocess.check_output(['/opt/vc/bin/vcgencmd','measure_temp'])).decode()
        return float(s.split('=')[1][:-3])
    except:
        return 0

def get_ipaddress():
# Returns the current IP address
    arg='ip route list'
    p=subprocess.Popen(arg,shell=True,stdout=subprocess.PIPE)
    data = p.communicate()
    split_data = data[0].split()
    ipaddr = (split_data[split_data.index(b'src')+1]).decode()
    return ipaddr
def get_cpu_speed():
# Returns the current CPU speed
    f = os.popen('/opt/vc/bin/vcgencmd get_config arm_freq')
    cpu = f.read()
    return cpu
print('Free RAM: '+str(get_ram()[1])+' ('+str(get_ram()[0])+')')
print('Number of processes: '+str(get_process_count()))
print('Up time: '+get_up_stats()[0])
print('Number of connections: '+str(get_connections()))
print('Temperature in C: ' +str(get_temperature()))
print('IP-address: '+get_ipaddress())
print('CPU speed in MHz: '+str(get_cpu_speed()))
