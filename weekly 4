#blinkatest
import board
import digitalio
import busio
print("Hello blinka!")
# Try to great a Digital input
pin = digitalio.DigitalInOut(board.D4)
print("Digital IO ok!")
# Try to create an I2C device
i2c = busio.I2C(board.SCL, board.SDA)
print("I2C ok!")
# Try to create an SPI device
spi = busio.SPI(board.SCLK, board.MOSI, board.MISO)
print("SPI ok!")
print("done!")

#dht_simpletest
import time
import board
import adafruit_dht
# Initial the dht device, with data pin connected to:
dhtDevice = adafruit_dht.DHT22(board.D24)
# you can pass DHT22 use_pulseio=False if you wouldn't like to use pulseio.
# This may be necessary on a Linux single board computer like the Raspberry Pi,
# but it will not work in CircuitPython.
# dhtDevice = adafruit_dht.DHT22(board.D18, use_pulseio=False)
while True:
    try:
        # Print the values to the serial port
        temperature_c = dhtDevice.temperature
        temperature_f = temperature_c * (9 / 5) + 32
        humidity = dhtDevice.humidity
        print(
            "Temp: {:.1f} F / {:.1f} C    Humidity: {}% ".format(
                temperature_f, temperature_c, humidity
            )
        )
    except RuntimeError as error:
        # Errors happen fairly often, DHT's are hard to read, just keep going
        print(error.args[0])
        time.sleep(2.0)
        continue
    except Exception as error:
        exit()
        raise error
    time.sleep(2.0)
 
#hello_world 
from flask import Flask
from flask import send_from_directory
import os
app = Flask(__name__)
@app.route("/")
def hello():
    return "Hello World!"

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', 
                               mimetype='image/vnd.microsoft.icon')
if __name__ == "__main__":
    app.run()    

#memory_game
import logging
from random import randint
from flask import Flask, render_template
from flask_ask import Ask, statement, question, session
app = Flask(__name__)
ask = Ask(app, "/")
logging.getLogger("flask_ask").setLevel(logging.DEBUG)
@ask.launch
def new_game():
    welcome_msg = render_template('welcome')
    return question(welcome_msg)
@ask.intent("YesIntent")
def next_round():
    numbers = [randint(0, 9) for _ in range(3)]
    round_msg = render_template('round', numbers=numbers)
    session.attributes['numbers'] = numbers[::-1]  # reverse
    return question(round_msg)
@ask.intent("AnswerIntent", convert={'first': int, 'second': int, 'third': int})
def answer(first, second, third):
    winning_numbers = session.attributes['numbers']
    if [first, second, third] == winning_numbers:
        msg = render_template('win')
    else:
        msg = render_template('lose')
    return statement(msg)
if __name__ == '__main__':
    app.run(debug=True)    
   
#system_info   
import subprocess
import os
def get_ram():
# Returns a tuple (total ram, available ram) in megabytes. See www.linuxatemyram.com
    try:
        s = (subprocess.check_output(['free','-m'])).decode()
        lines = s.split('\n')
        return int(lines[1].split()[1]), int(lines[2].split()[3])
    except:
        return 0
def get_process_count():
# Returns the number of processes
    try:
        s = (subprocess.check_output(['ps','-e'])).decode()
        return len(s.split('\n'))
    except:
        return 0
def get_up_stats():
# Returns a tuple (uptime, 5 min load average)
    try:
        s = (subprocess.check_output(['uptime'])).decode()
        load_split = s.split('load average: ')
        load_five = float(load_split[1].split(',')[1])
        up = load_split[0]
        up_pos = up.rfind(',',0,len(up)-4)
        up = up[:up_pos].split('up ')[1]
        return ( up , load_five )
    except:
        return '' , 0
def get_connections():
# Returns the number of network connections
    try:
        s = (subprocess.check_output(['netstat','-tun'])).decode()
        return len([x for x in s.split() if x == 'ESTABLISHED'])
    except:
        return 0
def get_temperature():
# Returns the temperature in degrees C
    try:
        s = (subprocess.check_output(['/opt/vc/bin/vcgencmd','measure_temp'])).decode()
        return float(s.split('=')[1][:-3])
    except:
        return 0

def get_ipaddress():
# Returns the current IP address
    arg='ip route list'
    p=subprocess.Popen(arg,shell=True,stdout=subprocess.PIPE)
    data = p.communicate()
    split_data = data[0].split()
    ipaddr = (split_data[split_data.index(b'src')+1]).decode()
    return ipaddr
def get_cpu_speed():
# Returns the current CPU speed
    f = os.popen('/opt/vc/bin/vcgencmd get_config arm_freq')
    cpu = f.read()
    return cpu
print('Free RAM: '+str(get_ram()[1])+' ('+str(get_ram()[0])+')')
print('Number of processes: '+str(get_process_count()))
print('Up time: '+get_up_stats()[0])
print('Number of connections: '+str(get_connections()))
print('Temperature in C: ' +str(get_temperature()))
print('IP-address: '+get_ipaddress())
print('CPU speed in MHz: '+str(get_cpu_speed()))   
